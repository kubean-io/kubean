# Copyright 2023 Authors of kubean-io
# SPDX-License-Identifier: Apache-2.0

---
- hosts: localhost
  gather_facts: false
  vars:
    cluster_name: "{{ lookup('env','CLUSTER_NAME') }}"
    cluster_operation_name: "{{ lookup('env','CLUSTER_OPERATION_NAME') }}"
    cluster_job_name: "{{ lookup('env','CLUSTER_JOB_NAME') }}"
    ensure_interrupted_pod_never_run: true
  tasks:
    - name: Fetch JobHasRun Status From Operation {{ cluster_operation_name }}
      shell: |
        kubectl get clusteroperations {{ cluster_operation_name }} -json '.status.jobHasRun'
      ignore_errors: true
      register: jobHasRunStatus
      retries: 3
      delay: 1
      when:
        - ensure_interrupted_pod_never_run

    - name: Fatal When the job has been run before
      failed_when: "true" in jobHasRunStatus.stdout
      when:
        - ensure_interrupted_pod_never_run

    - name: Set JobHasRun true For Operation {{ cluster_operation_name }}
      ignore_errors: true
      retries: 3
      delay: 1
      shell: |
        kubectl patch clusteroperations {{ cluster_operation_name }} -json '.status.jobHasRun=true'
      when:
        - ensure_interrupted_pod_never_run

- name: Pre-check
  hosts: k8s_cluster
  gather_facts: true
  become: true
  vars:
    check_connection: true
    fetch_os_type: true
    fetch_os_kernel_version: true
    check_existing_k8s_service: true
    check_dual_stack_network: true

  tasks:
    - name: Perform check_connection
      ansible.builtin.ping:
      register: connection_ping_result
      ignore_errors: true
      when:
        - check_connection
    - name: Process connection_ping_result
      ignore_errors: true
      set_fact:
        check_connection_result: "{{ connection_ping_result.failed == false }}"
      when:
        - check_connection
    - name: Store check_connection result to localhost
      shell: " ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )  ; yq -i '.{{inventory_hostname}}.ping_connection=\"{{ check_connection_result }}\"' /tmp/kubean_data_temp_cache "
      delegate_to: localhost
      when:
        - check_connection

    - name: Perform fetch_os_type
      shell: cat /etc/os-release
      register: os_release_cmd_result
      ignore_errors: true
      when:
        - fetch_os_type
    - name: Process fetch_os_type_result
      ignore_errors: true
      set_fact:
        ## fetch_os_type_result: "{{ dict(_keys|zip(_vals)) | combine( { 'RAW_OUTPUT': os_release_cmd_result.stdout } ) }}" ## RAW_OUTPUT.value does not work well with `yq`.
        fetch_os_type_result: "{{ dict(_keys|zip(_vals)) }}"
      vars:
        _arr: "{{ os_release_cmd_result.stdout.splitlines() | map('trim') | select() | list }}"
        _keys: "{{ _arr | map('split', '=') | map('first') | map('replace', '\"' ,'') | map('trim') | list }}"
        _vals: "{{ _arr | map('split', '=') | map('last') | map('replace', '\"' , '') | map('trim') | list }}"
      when:
        - fetch_os_type
    - name: Store fetch_os_type result to localhost
      shell: " ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )  ; yq -i '.{{inventory_hostname}}.os_type.{{ item.key }}=\"{{ item.value }}\"' /tmp/kubean_data_temp_cache "
      loop: "{{ lookup( 'dict' , fetch_os_type_result ) }}"
      delegate_to: localhost
      when:
        - fetch_os_type


    - name: Perform check_existing_k8s_service
      shell: bash -c "kubectl get namespace >/dev/null 2>&1 " || bash -c " ps -ef | grep kubelet | grep -v grep >/dev/null 2>&1 "
      register: check_k8s_cmd_result
      ignore_errors: true
      when:
        - check_existing_k8s_service
    - name: Process check_k8s_cmd_result
      ignore_errors: true
      set_fact:
        check_existing_k8s_service_result: "{{ check_k8s_cmd_result.rc == 0 }}"
      when:
        - check_existing_k8s_service
    - name: Store check_existing_k8s_service result to localhost
      shell: " ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )  ; yq -i '.{{inventory_hostname}}.existing_k8s_service=\"{{ check_existing_k8s_service_result }}\"' /tmp/kubean_data_temp_cache "
      delegate_to: localhost
      when:
        - check_existing_k8s_service

    - name: Perform fetch ip info
      shell: |
        ip --brief  address show | grep -i up | grep '{{ access_ip }}' | sed 's/fe80\S*//g' | sed 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\S*//g' | head
      register: ip_cmd_info_result # ens192       UP         fd00:10:7::103/64
      ignore_errors: true
      when:
        - check_dual_stack_network
    - name: Store dual_stack_network result
      shell: |
        ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )
        yq -i '.{{inventory_hostname}}.dual_stack_network="{{ ip_cmd_info_result.stdout | split | length > 2 }}"' /tmp/kubean_data_temp_cache
      delegate_to: localhost
      ignore_errors: true
      when:
        - check_dual_stack_network

    - name: Store os_kernel_version result to localhost
      shell: |
        ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )
        yq -i '.{{inventory_hostname}}.os_kernel_version_output="{{ ansible_kernel }}"' /tmp/kubean_data_temp_cache
        yq -i '.{{inventory_hostname}}.os_kernel_version="{{ ansible_kernel.split('-')[0] }}"' /tmp/kubean_data_temp_cache
        yq -i '.{{inventory_hostname}}.pkg_mgr="{{ ansible_pkg_mgr }}"' /tmp/kubean_data_temp_cache
      ignore_errors: true
      delegate_to: localhost
      when:
        - fetch_os_kernel_version

    - name: Store os family result to localhost
      shell: |
        ( if [ ! -f /tmp/kubean_data_temp_cache ]; then touch /tmp/kubean_data_temp_cache ; fi )
        yq -i '.{{inventory_hostname}}.os_family="{{ ansible_os_family }}"' /tmp/kubean_data_temp_cache
      ignore_errors: true
      delegate_to: localhost

- hosts: localhost
  gather_facts: false
  vars:
    cluster_name: "{{ lookup('env','CLUSTER_NAME') }}"
    configmap_name: "{{ cluster_name }}-precheck-result"
    spray_job_pod_namespace: 'kubean-system'
  tasks:
    - name: Try to Fetch Spray Job Pod Namespace
      shell: 'cat /run/secrets/kubernetes.io/serviceaccount/namespace'
      ignore_errors: true
      register: namespace_content

    - name: Update Spray Job Pod Namespace
      set_fact:
        spray_job_pod_namespace: "{{ namespace_content.stdout | trim }}"
      when: namespace_content.rc == 0

    - name: Get precheck result
      shell: 'yq -o=json /tmp/kubean_data_temp_cache || echo {} '
      register: yq_cmd
      ignore_errors: true

    - name: Set precheck result
      set_fact:
        check_result: "{{yq_cmd.stdout | replace('\"True\"','true') | replace('\"False\"','false')}}"

    - name: Show precheck result
      debug: var=check_result

    - name: Clean configmap
      shell: "/usr/local/bin/kubectl -n {{ spray_job_pod_namespace }} delete configmap {{ configmap_name }} "
      args:
        executable: /bin/bash
      ignore_errors: true
      register: clean_cm_result
      until: clean_cm_result.rc == 0
      retries: 3
      delay: 3
      when: namespace_content.rc == 0

    - name: Create configmap
      shell: "/usr/local/bin/kubectl -n {{ spray_job_pod_namespace }} create configmap {{ configmap_name }} --from-file=/tmp/kubean_data_temp_cache "
      args:
        executable: /bin/bash
      register: create_cm_result
      until: create_cm_result.rc == 0
      retries: 5
      delay: 5
      ignore_errors: true
      when: namespace_content.rc == 0

    - name: Patch preCheckResultRef info
      shell: >
        /usr/local/bin/kubectl patch --type=merge clusters.kubean.io {{ cluster_name }} -p '{"spec": {"preCheckRef": {"name": "'{{ configmap_name }}'", "namespace": "'{{ spray_job_pod_namespace }}'"}}}'
      args:
        executable: /bin/bash
      register: patch_ref_result
      until: patch_ref_result.rc == 0
      retries: 5
      delay: 5
      ignore_errors: true
      when: namespace_content.rc == 0

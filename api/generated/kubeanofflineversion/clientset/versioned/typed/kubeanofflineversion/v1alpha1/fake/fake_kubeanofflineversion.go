// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "kubean.io/api/apis/kubeanofflineversion/v1alpha1"
)

// FakeKuBeanOfflineVersions implements KuBeanOfflineVersionInterface
type FakeKuBeanOfflineVersions struct {
	Fake *FakeKubeanofflineversionV1alpha1
}

var kubeanofflineversionsResource = schema.GroupVersionResource{Group: "kubeanofflineversion.kubean.io", Version: "v1alpha1", Resource: "kubeanofflineversions"}

var kubeanofflineversionsKind = schema.GroupVersionKind{Group: "kubeanofflineversion.kubean.io", Version: "v1alpha1", Kind: "KuBeanOfflineVersion"}

// Get takes name of the kuBeanOfflineVersion, and returns the corresponding kuBeanOfflineVersion object, and an error if there is any.
func (c *FakeKuBeanOfflineVersions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.KuBeanOfflineVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubeanofflineversionsResource, name), &v1alpha1.KuBeanOfflineVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KuBeanOfflineVersion), err
}

// List takes label and field selectors, and returns the list of KuBeanOfflineVersions that match those selectors.
func (c *FakeKuBeanOfflineVersions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.KuBeanOfflineVersionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubeanofflineversionsResource, kubeanofflineversionsKind, opts), &v1alpha1.KuBeanOfflineVersionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KuBeanOfflineVersionList{ListMeta: obj.(*v1alpha1.KuBeanOfflineVersionList).ListMeta}
	for _, item := range obj.(*v1alpha1.KuBeanOfflineVersionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kuBeanOfflineVersions.
func (c *FakeKuBeanOfflineVersions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubeanofflineversionsResource, opts))
}

// Create takes the representation of a kuBeanOfflineVersion and creates it.  Returns the server's representation of the kuBeanOfflineVersion, and an error, if there is any.
func (c *FakeKuBeanOfflineVersions) Create(ctx context.Context, kuBeanOfflineVersion *v1alpha1.KuBeanOfflineVersion, opts v1.CreateOptions) (result *v1alpha1.KuBeanOfflineVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubeanofflineversionsResource, kuBeanOfflineVersion), &v1alpha1.KuBeanOfflineVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KuBeanOfflineVersion), err
}

// Update takes the representation of a kuBeanOfflineVersion and updates it. Returns the server's representation of the kuBeanOfflineVersion, and an error, if there is any.
func (c *FakeKuBeanOfflineVersions) Update(ctx context.Context, kuBeanOfflineVersion *v1alpha1.KuBeanOfflineVersion, opts v1.UpdateOptions) (result *v1alpha1.KuBeanOfflineVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubeanofflineversionsResource, kuBeanOfflineVersion), &v1alpha1.KuBeanOfflineVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KuBeanOfflineVersion), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKuBeanOfflineVersions) UpdateStatus(ctx context.Context, kuBeanOfflineVersion *v1alpha1.KuBeanOfflineVersion, opts v1.UpdateOptions) (*v1alpha1.KuBeanOfflineVersion, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubeanofflineversionsResource, "status", kuBeanOfflineVersion), &v1alpha1.KuBeanOfflineVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KuBeanOfflineVersion), err
}

// Delete takes name of the kuBeanOfflineVersion and deletes it. Returns an error if one occurs.
func (c *FakeKuBeanOfflineVersions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(kubeanofflineversionsResource, name, opts), &v1alpha1.KuBeanOfflineVersion{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKuBeanOfflineVersions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubeanofflineversionsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.KuBeanOfflineVersionList{})
	return err
}

// Patch applies the patch and returns the patched kuBeanOfflineVersion.
func (c *FakeKuBeanOfflineVersions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.KuBeanOfflineVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubeanofflineversionsResource, name, pt, data, subresources...), &v1alpha1.KuBeanOfflineVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KuBeanOfflineVersion), err
}

name: Offline Build

on:
  workflow_call:

jobs:
  offline-build:
    runs-on: ubuntu-latest
    steps:
    - name: Git clone kubean repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set kubespray version env
      run: |
        echo "SPRAY_VERSION=$(yq ".kubespray_version" version.yml)" >> ${GITHUB_ENV}
        echo "KUBE_VERSION=$(yq ".kubernetes_version" version.yml)" >> ${GITHUB_ENV}

    - name: Git clone kubespray repo
      uses: actions/checkout@v3
      with:
        repository: kubernetes-sigs/kubespray
        ref: ${{ env.SPRAY_VERSION }}
        path: ./kubespray

    - name: Install yq tool
      uses: mikefarah/yq@v4.40.3

    - name: Generate InfoManifest & OfflineVersion files
      env:
        KUBEAN_TAG: ${{ github.ref_name }}
        SPRAY_TAG: ${{ env.SPRAY_VERSION }}
        KUBE_VERSION: ${{ env.KUBE_VERSION }}
      run: |
        bash artifacts/manage_version_cr.sh create_manifest
        bash artifacts/manage_version_cr.sh create_localartifactset
        cp artifacts/import_iso.sh ${KUBEAN_TAG}/

        echo "localartifactset cr output:"
        cat ${KUBEAN_TAG}/localartifactset.cr.yaml
        echo "manifest cr output:"
        cat charts/kubean/templates/manifest.cr.yaml

    - name: Preparing the python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install kubespray requirements
      run: |
        cd kubespray/
        python3 -m pip install --no-cache-dir -r requirements.txt
        cd ../

    - name: Generate binaries & images offline packages (amd64)
      env:
        KUBEAN_TAG: ${{ github.ref_name }}
        ARCH: amd64
        KUBE_VERSION: ${{ env.KUBE_VERSION }}
      run: |
        OFFLINE_PACKAGE_DIR=${KUBEAN_TAG}/${ARCH}
        bash artifacts/generate_offline_package.sh all
        cd ${OFFLINE_PACKAGE_DIR}/
        tar -zcvf files-${ARCH}-${KUBEAN_TAG}.tar.gz files/
        tar -zcvf images-${ARCH}-${KUBEAN_TAG}.tar.gz images/
        mv files.list files-${ARCH}.list
        mv images.list images-${ARCH}.list
        cd ../../
        tree ${KUBEAN_TAG}/

    - name: Generate binaries & images offline packages (arm64)
      env:
        KUBEAN_TAG: ${{ github.ref_name }}
        ARCH: arm64
        KUBE_VERSION: ${{ env.KUBE_VERSION }}
      run: |
        OFFLINE_PACKAGE_DIR=${KUBEAN_TAG}/${ARCH}
        bash artifacts/generate_offline_package.sh all
        cd ${OFFLINE_PACKAGE_DIR}/
        tar -zcvf files-${ARCH}-${KUBEAN_TAG}.tar.gz files/
        tar -zcvf images-${ARCH}-${KUBEAN_TAG}.tar.gz images/
        mv files.list files-${ARCH}.list
        mv images.list images-${ARCH}.list
        cd ../../
        tree ${KUBEAN_TAG}/
        echo -e "\noutput files size:\n"
        ls -lh ${KUBEAN_TAG}/amd64/
        ls -lh ${KUBEAN_TAG}/arm64/

    - name: Release and upload packages
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          ${{ github.ref_name }}/*/*.tar.gz
          ${{ github.ref_name }}/*/*.list
          ${{ github.ref_name }}/*.cr.yaml
          ${{ github.ref_name }}/*.sh

    - name: Upload InfoManifest CR
      uses: actions/upload-artifact@v3
      with:
        path: charts/kubean/templates/manifest.cr.yaml
        name: info-manifest-cr-file
